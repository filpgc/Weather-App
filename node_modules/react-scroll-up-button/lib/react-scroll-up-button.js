"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _assign = require("babel-runtime/core-js/object/assign");

var _assign2 = _interopRequireDefault(_assign);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _tweenFunctions = require("tween-functions");

var _tweenFunctions2 = _interopRequireDefault(_tweenFunctions);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _detectPassiveEvents = require("detect-passive-events");

var _detectPassiveEvents2 = _interopRequireDefault(_detectPassiveEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ScrollUpButton = function (_React$Component) {
    (0, _inherits3.default)(ScrollUpButton, _React$Component);

    function ScrollUpButton(props) {
        (0, _classCallCheck3.default)(this, ScrollUpButton);

        var _this = (0, _possibleConstructorReturn3.default)(this, (ScrollUpButton.__proto__ || (0, _getPrototypeOf2.default)(ScrollUpButton)).call(this, props));

        _this.state = { ToggleScrollUp: '' };
        _this.Animation = { StartPosition: 0, CurrentAnimationTime: 0, StartTime: null, AnimationFrame: null };
        _this.HandleScroll = _this.HandleScroll.bind(_this);
        _this.StopScrollingFrame = _this.StopScrollingFrame.bind(_this);
        _this.ScrollingFrame = _this.ScrollingFrame.bind(_this);
        _this.HandleClick = _this.HandleClick.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(ScrollUpButton, [{
        key: "HandleScroll",
        value: function HandleScroll() {
            //window.pageYOffset = current scroll position
            //ShowAtPostion = position at which we want the button to show.
            if (window.pageYOffset > this.props.ShowAtPostion) {
                //styles.Toggled = the class name we want applied to transition the button in.
                this.setState({ ToggleScrollUp: this.props.TransitionClassName });
            } else {
                //remove the class name
                this.setState({ ToggleScrollUp: '' });
            }
        }
    }, {
        key: "HandleClick",
        value: function HandleClick() {
            this.StopScrollingFrame(); //Stoping all AnimationFrames
            this.Animation.StartPosition = window.pageYOffset; //current scroll position
            this.Animation.CurrentAnimationTime = 0;
            this.Animation.StartTime = null;
            //Start the scrolling animation.
            this.Animation.AnimationFrame = window.requestAnimationFrame(this.ScrollingFrame);
        }
    }, {
        key: "ScrollingFrame",
        value: function ScrollingFrame() {
            var timestamp = Math.floor(Date.now());
            //If StartTime has not been assigned a value, assign it the start timestamp.
            if (!this.Animation.StartTime) {
                this.Animation.StartTime = timestamp;
            }

            //set CurrentAnimationTime every iteration of ScrollingFrame()
            this.Animation.CurrentAnimationTime = timestamp - this.Animation.StartTime;
            //if we hit the StopPosition, StopScrollingFrame()
            if (window.pageYOffset <= this.props.StopPosition) {
                this.StopScrollingFrame();
            } else {
                //Otherwise continue ScrollingFrame to the StopPosition.
                //Does not support horizontal ScrollingFrame.
                //Let TweenFunctions handle the math to give us a new position based on AnimationDuration and EasingType type
                var YPos = _tweenFunctions2.default[this.props.EasingType](this.Animation.CurrentAnimationTime, this.Animation.StartPosition, this.props.StopPosition, this.props.AnimationDuration);
                window.scrollTo(0, YPos);
                //Request another frame to be painted
                this.Animation.AnimationFrame = window.requestAnimationFrame(this.ScrollingFrame);
            }
        }
    }, {
        key: "StopScrollingFrame",
        value: function StopScrollingFrame() {
            //Stop the Animation Frames.
            window.cancelAnimationFrame(this.Animation.AnimationFrame);
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            this.HandleScroll(); // run HandleScroll() at mount incase we are already scrolled down
            window.addEventListener('scroll', this.HandleScroll);
            window.addEventListener("wheel", this.StopScrollingFrame, _detectPassiveEvents2.default.hasSupport ? { passive: true } : false); //Stop animation if user mouse wheels during animation.
            window.addEventListener("touchstart", this.StopScrollingFrame, _detectPassiveEvents2.default.hasSupport ? { passive: true } : false); //Stop animation if user touches the screen during animation.
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            //Remove all events, since component is no longer mounted.
            window.removeEventListener('scroll', this.HandleScroll);
            window.removeEventListener("wheel", this.StopScrollingFrame, false);
            window.removeEventListener("touchstart", this.StopScrollingFrame, false);
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var styles = {
                MainStyle: {
                    backgroundColor: 'rgba(50, 50, 50, 0.5)',
                    height: 50,
                    position: 'fixed',
                    bottom: 20,
                    width: 50,
                    WebkitTransition: 'all 0.5s ease-in-out',
                    transition: 'all 0.5s ease-in-out',
                    transitionProperty: 'opacity, right',
                    cursor: 'pointer',
                    opacity: 0,
                    right: -50,
                    zIndex: 1000
                },
                SvgStyle: {
                    display: 'inline-block',
                    width: '100%',
                    height: '100%',
                    strokeWidth: 0,
                    stroke: 'white',
                    fill: 'white',
                    paddingLeft: 10
                },
                ToggledStyle: {
                    opacity: 1,
                    right: 20
                }
            };

            if (this.props.children) {
                var childrenWithProps = _react2.default.Children.map(this.props.children, function (child) {
                    return _react2.default.cloneElement(child, {
                        className: _this2.className
                    });
                });
                return _react2.default.createElement(
                    "aside",
                    { className: this.props.ContainerClassName + " " + this.state.ToggleScrollUp, onClick: this.HandleClick },
                    childrenWithProps
                );
            } else {
                return _react2.default.createElement(
                    "aside",
                    { className: this.props.ContainerClassName + " " + this.state.ToggleScrollUp, style: (0, _assign2.default)({}, styles.MainStyle, this.state.ToggleScrollUp && styles.ToggledStyle), onClick: this.HandleClick },
                    _react2.default.createElement(
                        "svg",
                        { viewBox: "0 0 32 32", version: "1.1", xmlns: "http://www.w3.org/2000/svg", x: "0", y: "0", xmlSpace: "preserve", style: styles.SvgStyle },
                        _react2.default.createElement("path", { d: "M19.196 23.429q0 0.232-0.179 0.411l-0.893 0.893q-0.179 0.179-0.411 0.179t-0.411-0.179l-7.018-7.018-7.018 7.018q-0.179 0.179-0.411 0.179t-0.411-0.179l-0.893-0.893q-0.179-0.179-0.179-0.411t0.179-0.411l8.321-8.321q0.179-0.179 0.411-0.179t0.411 0.179l8.321 8.321q0.179 0.179 0.179 0.411zM19.196 16.571q0 0.232-0.179 0.411l-0.893 0.893q-0.179 0.179-0.411 0.179t-0.411-0.179l-7.018-7.018-7.018 7.018q-0.179 0.179-0.411 0.179t-0.411-0.179l-0.893-0.893q-0.179-0.179-0.179-0.411t0.179-0.411l8.321-8.321q0.179-0.179 0.411-0.179t0.411 0.179l8.321 8.321q0.179 0.179 0.179 0.411z" })
                    )
                );
            }
        }
    }]);
    return ScrollUpButton;
}(_react2.default.Component);

exports.default = ScrollUpButton;

ScrollUpButton.defaultProps = {
    ContainerClassName: 'ScrollUpButton__Container',
    StopPosition: 0,
    ShowAtPostion: 150,
    EasingType: 'easeOutCubic',
    AnimationDuration: 500,
    TransitionClassName: 'ScrollUpButton__Toggled'
};
ScrollUpButton.propTypes = {
    StopPosition: _propTypes2.default.number,
    ShowAtPostion: _propTypes2.default.number.isRequired, // show button under this position,
    EasingType: _propTypes2.default.oneOf(['linear', 'easeInQuad', 'easeOutQuad', 'easeInOutQuad', 'easeInCubic', 'easeOutCubic', 'easeInOutCubic', 'easeInQuart', 'easeOutQuart', 'easeInOutQuart', 'easeInQuint', 'easeOutQuint', 'easeInOutQuint', 'easeInSine', 'easeOutSine', 'easeInOutSine', 'easeInExpo', 'easeOutExpo', 'easeInOutExpo', 'easeInCirc', 'easeOutCirc', 'easeInOutCirc', 'easeInElastic', 'easeOutElastic', 'easeInOutElastic', 'easeInBack', 'easeOutBack', 'easeInOutBack', 'easeInBounce', 'easeOutBounce', 'easeInOutBounce']),
    AnimationDuration: _propTypes2.default.number // seconds
};